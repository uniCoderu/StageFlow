from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from storage.ticket_storage import marketplace_data
from handlers.start_handler import start

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "settings":
        keyboard = [
            [InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton("üåç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", callback_data="select_city")],
            [InlineKeyboardButton("üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/monekeny")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=reply_markup)

    elif query.data == "main_menu":
        await start(update, context)

    elif query.data == "marketplace":
        if marketplace_data:
            ticket_buttons = [
                [InlineKeyboardButton(f"{ticket['name']} - {ticket['price']} —Ä—É–±.", callback_data=f"market_details_{i}")]
                for i, ticket in enumerate(marketplace_data)
            ]
            ticket_buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])

            reply_markup = InlineKeyboardMarkup(ticket_buttons)
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–ù–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]))

    elif query.data.startswith("market_details_"):
        index = int(query.data.split("_")[2])
        ticket = marketplace_data[index]
        event_details = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ:\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ticket['name']}\n"
            f"–¶–µ–Ω–∞: {ticket['price']} —Ä—É–±.\n"
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –±–∏–ª–µ—Ç?"
        )
        keyboard = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_ticket_{index}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="marketplace")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(event_details, reply_markup=reply_markup)

    elif query.data.startswith("buy_ticket_"):
        index = int(query.data.split("_")[2])
        ticket = marketplace_data.pop(index)
        ticket_folder = os.path.join(TICKETS_DIR, ticket["id"])
        ticket_file_path = os.path.join(ticket_folder, "ticket_file")

        await query.edit_message_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç \"{ticket['name']}\" –∑–∞ {ticket['price']} —Ä—É–±."
        )
        if os.path.exists(ticket_file_path):
            with open(ticket_file_path, "rb") as f:
                await query.message.reply_document(document=f, caption=f"–í–∞—à –±–∏–ª–µ—Ç: {ticket['name']}")
        await start(update, context)

    elif query.data == "sell_ticket":
        await query.edit_message_text(
            "–ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–∞:\n"
            "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ö–æ–Ω—Ü–µ—Ä—Ç XYZ\").\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞:"
        )
        context.user_data["awaiting_ticket_name"] = True