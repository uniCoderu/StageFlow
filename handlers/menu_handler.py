# handlers/menu_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from storage.user_data import user_data
from config import logger

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫:") -> None:
    keyboard = [
        [InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="payment_details")],
        [InlineKeyboardButton("üåê –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", callback_data="select_city")],
        [InlineKeyboardButton("üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/monekeny")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º callback
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        logger.error("Callback query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update")
        return
    await query.answer()

    user_id = query.from_user.id
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if data == "settings":
        await show_settings_menu(update, context)

    elif data == "payment_details":
        user_payment_data = user_data.get(user_id, {}).get("payment_details")
        if user_payment_data:
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data="edit_payment_details")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö?", reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("–°–ë–ü", callback_data="sbp")],
                [InlineKeyboardButton("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", callback_data="card")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)

    elif data == "sbp":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –±–∞–Ω–∫—É:")
        context.user_data["awaiting_sbp_phone"] = True

    elif data == "card":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:")
        context.user_data["awaiting_card_number"] = True

    elif data == "edit_payment_details":
        keyboard = [
            [InlineKeyboardButton("–°–ë–ü", callback_data="sbp")],
            [InlineKeyboardButton("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", callback_data="card")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)

    elif data.startswith("bank_"):
        bank_name = data.split("_")[1]
        user_data[user_id]["payment_details"]["bank"] = bank_name
        await query.edit_message_text(f"–í–∞—à –≤—ã–±–æ—Ä ({bank_name}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        await show_settings_menu(update, context)

    elif data == "select_city":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        context.user_data["awaiting_city"] = True
        logger.info(f"–û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    elif data == "main_menu":
        # –ü—Ä—è–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üèß –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", callback_data="marketplace_menu")],
            [InlineKeyboardButton("üìú –ü–æ–ª–∏—Ç. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="policy")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        await query.edit_message_text(text, reply_markup=reply_markup)
        logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
