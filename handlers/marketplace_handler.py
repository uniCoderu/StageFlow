# handlers/marketplace_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes
from storage.ticket_storage import marketplace_data
from config import logger, PAYMASTER_API_KEY

async def marketplace_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏:
    ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤
    ‚Äì –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É
    ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
    ‚Äì –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ callback_query, –∏ –∫–æ–º–∞–Ω–¥—É /marketplace.
    """
    # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        send = lambda text, **kwargs: query.edit_message_text(text, **kwargs)
        reply_target = query.message
        data = query.data
        user_id = query.from_user.id
    else:
        # –∫–æ–º–∞–Ω–¥–∞ /marketplace
        msg = update.message
        send = lambda text, **kwargs: msg.reply_text(text, **kwargs)
        reply_target = msg
        data = "marketplace"
        user_id = msg.from_user.id

    logger.info(f"[Marketplace] user={user_id} data={data}")

    # 2) –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    if data == "marketplace":
        buttons = [[InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="sell_ticket")]]
        for ticket in marketplace_data:
            buttons.append([
                InlineKeyboardButton(
                    f"{ticket['name']} ‚Äî {ticket['price']}‚ÇΩ",
                    callback_data=f"market_details_{ticket['id']}"
                )
            ])
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        markup = InlineKeyboardMarkup(buttons)
        await send("üîé –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞:", reply_markup=markup)
        return

    # 3) –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∂–∏
    if data == "sell_ticket":
        await send(
            "üí≥ –ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–∞:\n"
            "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–æ–Ω—Ü–µ—Ä—Ç XYZ¬ª)\n"
            "2Ô∏è‚É£ –ó–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö"
        )
        context.user_data["awaiting_ticket_name"] = True
        return

    # 4) –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
    if data.startswith("market_details_"):
        ticket_id = data.split("_")[2]
        ticket = next((t for t in marketplace_data if str(t["id"]) == ticket_id), None)
        if not ticket:
            markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="marketplace")]]
            )
            await send("‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
            return

        text = (
            f"üé´ *{ticket['name']}*\n"
            f"üí∞ *{ticket['price']}*‚ÇΩ\n\n"
            "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?"
        )
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"buy_ticket_{ticket_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="marketplace")]
        ])
        await send(text, reply_markup=markup, parse_mode="Markdown")
        return

    # 5) –ù–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã
    if data.startswith("buy_ticket_"):
        ticket_id = data.split("_")[2]
        ticket = next((t for t in marketplace_data if str(t["id"]) == ticket_id), None)
        if not ticket:
            markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="marketplace")]]
            )
            await send("‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
            return

        prices = [LabeledPrice("–ë–∏–ª–µ—Ç", ticket["price"] * 100)]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        await reply_target.reply_invoice(
            title=ticket["name"],
            description=f"–û–ø–ª–∞—Ç–∞ –∑–∞ –±–∏–ª–µ—Ç: {ticket['name']}",
            payload=f"purchase_{ticket_id}",
            provider_token=PAYMASTER_API_KEY,
            currency="RUB",
            prices=prices,
            start_parameter="buy_ticket",
            is_flexible=False
        )
        return
