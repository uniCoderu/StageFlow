# handlers/marketplace_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes
from storage.ticket_storage import marketplace_data, TICKETS_DIR
from config import logger, PAYMASTER_API_KEY

async def marketplace_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤, –∏ –¥–µ—Ç–∞–ª–∏, –∏ –ø—Ä–æ–¥–∞–∂—É/–ø–æ–∫—É–ø–∫—É."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∏ –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–ª:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        send = lambda text, **kwargs: query.edit_message_text(text, **kwargs)
        user_id = query.from_user.id
        data = query.data
    else:
        # –∫–æ–º–∞–Ω–¥–∞ /marketplace –∏–ª–∏ MessageHandler
        msg = update.message
        send = lambda text, **kwargs: msg.reply_text(text, **kwargs)
        user_id = msg.from_user.id
        data = "marketplace"

    logger.info(f"[Marketplace] –≤—ã–∑–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —Å data={data}")

    # 1) –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    if data == "marketplace":
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="sell_ticket")]
        ]
        # —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤
        for ticket in marketplace_data:
            btn = InlineKeyboardButton(
                f"{ticket['name']} ‚Äî {ticket['price']}‚ÇΩ",
                callback_data=f"market_details_{ticket['id']}"
            )
            keyboard.append([btn])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

        markup = InlineKeyboardMarkup(keyboard)
        await send("üîé –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞:", reply_markup=markup)
        return

    # 2) –ù–∞—á–∞–ª–æ –ø—Ä–æ–¥–∞–∂–∏
    if data == "sell_ticket":
        await send(
            "üí≥ –ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–∞:\n"
            "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–æ–Ω—Ü–µ—Ä—Ç XYZ¬ª)\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö"
        )
        context.user_data["awaiting_ticket_name"] = True
        return

    # 3) –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
    if data.startswith("market_details_"):
        ticket_id = data.split("_")[2]
        ticket = next((t for t in marketplace_data if t["id"] == ticket_id), None)
        if not ticket:
            await send("‚ö†Ô∏è –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="marketplace")]
            ]))
            return

        text = (
            f"üé´ *{ticket['name']}*\n"
            f"üí∞ –¶–µ–Ω–∞: *{ticket['price']}*‚ÇΩ\n\n"
            "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?"
        )
        buy_btn = InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"buy_ticket_{ticket_id}")
        back_btn = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="marketplace")
        await send(text, reply_markup=InlineKeyboardMarkup([[buy_btn], [back_btn]]), parse_mode="Markdown")
        return

    # 4) –û–ø–ª–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
    if data.startswith("buy_ticket_"):
        ticket_id = data.split("_")[2]
        ticket = next((t for t in marketplace_data if t["id"] == ticket_id), None)
        if not ticket:
            await send("‚ö†Ô∏è –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="marketplace")]
            ]))
            return

        title = ticket['name']
        description = f"–û–ø–ª–∞—Ç–∞ –±–∏–ª–µ—Ç–∞: {ticket['name']}"
        payload = f"purchase_{ticket_id}"
        prices = [LabeledPrice("–ë–∏–ª–µ—Ç", ticket['price'] * 100)]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö

        # —à–ª—ë–º invoice
        await query.message.reply_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token=PAYMASTER_API_KEY,
            currency="RUB",
            prices=prices,
            start_parameter="buy_ticket",
            is_flexible=False
        )
        return
