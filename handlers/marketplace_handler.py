# handlers/marketplace_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes
from storage.ticket_storage import marketplace_data, TICKETS_DIR
from config import logger, PAYMASTER_API_KEY

async def marketplace_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π."""
    query = update.callback_query
    if not query:
        logger.error("Callback query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update")
        return
    await query.answer()

    user_id = query.from_user.id
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if data == "marketplace":
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="sell_ticket")]
        ]
        if marketplace_data:
            ticket_buttons = [
                [InlineKeyboardButton(f"{ticket['name']} - {ticket['price']} —Ä—É–±.", callback_data=f"market_details_{ticket['id']}")]
                for ticket in marketplace_data
            ]
            keyboard.extend(ticket_buttons)
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞:", reply_markup=reply_markup)

    elif data == "sell_ticket":
        await query.edit_message_text(
            "–ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–∞:\n"
            "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ö–æ–Ω—Ü–µ—Ä—Ç XYZ\").\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞:"
        )
        context.user_data["awaiting_ticket_name"] = True

    elif data.startswith("market_details_"):
        ticket_id = data.split("_")[2]
        ticket = next((t for t in marketplace_data if t["id"] == ticket_id), None)
        if ticket:
            event_details = (
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ:\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ticket['name']}\n"
                f"–¶–µ–Ω–∞: {ticket['price']} —Ä—É–±.\n"
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –±–∏–ª–µ—Ç?"
            )
            keyboard = [
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_ticket_{ticket['id']}")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="marketplace")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(event_details, reply_markup=reply_markup)
        else:
            await query.edit_message_text("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="marketplace")]
            ]))

    elif data.startswith("buy_ticket_"):
        ticket_id = data.split("_")[2]
        ticket = next((t for t in marketplace_data if t["id"] == ticket_id), None)
        if ticket:
            title = ticket['name']
            description = f"–û–ø–ª–∞—Ç–∞ –∑–∞ –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ticket['name']}"
            payload = f"purchase_{ticket['id']}"
            currency = "RUB"
            price = ticket['price']
            prices = [LabeledPrice("–ë–∏–ª–µ—Ç", price * 100)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

            await query.message.reply_invoice(
                title=title,
                description=description,
                payload=payload,
                provider_token=PAYMASTER_API_KEY,
                currency=currency,
                prices=prices,
                start_parameter="buy_ticket",
                is_flexible=False
            )
        else:
            await query.edit_message_text("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="marketplace")]
            ]))
